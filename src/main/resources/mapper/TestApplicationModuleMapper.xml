<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ziroom.qa.quality.defende.provider.mapper.TestApplicationModuleMapper">

  <resultMap id="BaseResultTreeMap" type="com.ziroom.qa.quality.defende.provider.vo.ApplicationModuleTree">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="module_name" jdbcType="VARCHAR" property="label" />
  </resultMap>
  <select id="queryApplicationModuleTreeRootListByApplicationId" parameterType="java.lang.String" resultMap="BaseResultTreeMap">
    SELECT
        *
    FROM
        test_application_module
    WHERE 1=1
      <if test="applicationId != null">
        AND application_id =  #{applicationId,jdbcType=BIGINT}
      </if>
        AND parent_id IS NULL ORDER BY id DESC
  </select>
  <select id="queryApplicationModuleTreeByParentId" parameterType="com.ziroom.qa.quality.defende.provider.entity.TestApplicationModule" resultMap="BaseResultTreeMap">
    SELECT
        *
    FROM
        test_application_module
    WHERE 1=1
      <if test="applicationId != null">
        AND application_id =  #{applicationId,jdbcType=BIGINT}
      </if>
      <if test="parentId != null">
        AND parent_id = #{parentId,jdbcType=BIGINT}
      </if>
    ORDER BY id DESC
  </select>

  <!--<resultMap id="BaseResultMap" type="com.ziroom.qa.quality.defende.provider.entity.TestApplicationModule">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="application_id" jdbcType="BIGINT" property="applicationId" />
    <result column="module_name" jdbcType="VARCHAR" property="moduleName" />
    <result column="parent_id" jdbcType="BIGINT" property="parentId" />
    <result column="create_user" jdbcType="VARCHAR" property="createUser" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_user" jdbcType="VARCHAR" property="updateUser" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, application_id, module_name, parent_id, create_user, create_time, update_user,
    update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from test_application_module
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from test_application_module
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.ziroom.qa.quality.defende.provider.entity.TestApplicationModule">
    insert into test_application_module (id, application_id, module_name,
      parent_id, create_user, create_time,
      update_user, update_time)
    values (#{id,jdbcType=BIGINT}, #{applicationId,jdbcType=BIGINT}, #{moduleName,jdbcType=VARCHAR},
      #{parentId,jdbcType=BIGINT}, #{createUser,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP},
      #{updateUser,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.ziroom.qa.quality.defende.provider.entity.TestApplicationModule">
    insert into test_application_module
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="applicationId != null">
        application_id,
      </if>
      <if test="moduleName != null">
        module_name,
      </if>
      <if test="parentId != null">
        parent_id,
      </if>
      <if test="createUser != null">
        create_user,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateUser != null">
        update_user,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="applicationId != null">
        #{applicationId,jdbcType=BIGINT},
      </if>
      <if test="moduleName != null">
        #{moduleName,jdbcType=VARCHAR},
      </if>
      <if test="parentId != null">
        #{parentId,jdbcType=BIGINT},
      </if>
      <if test="createUser != null">
        #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null">
        #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.ziroom.qa.quality.defende.provider.entity.TestApplicationModule">
    update test_application_module
    <set>
      <if test="applicationId != null">
        application_id = #{applicationId,jdbcType=BIGINT},
      </if>
      <if test="moduleName != null">
        module_name = #{moduleName,jdbcType=VARCHAR},
      </if>
      <if test="parentId != null">
        parent_id = #{parentId,jdbcType=BIGINT},
      </if>
      <if test="createUser != null">
        create_user = #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null">
        update_user = #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ziroom.qa.quality.defende.provider.entity.TestApplicationModule">
    update test_application_module
    set application_id = #{applicationId,jdbcType=BIGINT},
      module_name = #{moduleName,jdbcType=VARCHAR},
      parent_id = #{parentId,jdbcType=BIGINT},
      create_user = #{createUser,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_user = #{updateUser,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>-->
</mapper>
